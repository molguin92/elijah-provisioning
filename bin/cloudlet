#!/usr/bin/env python
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

#import eventlet
#eventlet.monkey_patch(os=False)

import os
import sys
import traceback
import zipfile
from optparse import OptionParser

# for local debugging
if os.path.exists("../elijah") is True:
    sys.path.insert(0, "../")
from elijah.provisioning import synthesis as synthesis
from elijah.provisioning.configuration import Const as Const
from elijah.provisioning.configuration import Options
from elijah.provisioning import log as logging
from elijah.provisioning.db.table_def import BaseVM
from elijah.provisioning.db.table_def import Session
from elijah.provisioning.db.table_def import OverlayVM
from elijah.provisioning.db.api import DBConnector
from elijah.provisioning.package import PackagingUtil


LOG = logging.getLogger(__name__)


def print_usage(commands):
    usage = "\n%prog command  [option] -- [qemu-options]\n"
    usage += "  EX) cloudlet.py base /path/to/disk.img\n\n"
    usage += "Command list:\n"
    MAX_SPACE = 20
    for (comm, desc) in commands.iteritems():
        space = ""
        if len(comm) < MAX_SPACE:
            space = " " * (20-len(comm))
        usage += "  %s%s : %s\n" % (comm, space, desc)
    return usage


def get_database():
    dbconn = DBConnector()
    return dbconn


def process_command_line(argv, commands):
    VERSION = 'cloudlet tool: %s' % Const.VERSION
    DESCRIPTION = 'Cloudlet Overlay Generation & Synthesis'

    parser = OptionParser(
        usage=print_usage(commands),
        version=VERSION,
        description=DESCRIPTION)

    parser.add_option(
        '-t',
        '--no-trim',
        action='store_true',
        dest='disable_trim_support',
        default=False,
        help="This will disable TRIM Support, mainly for test purposes.\n" +
        "Normal user does not need to care about this option")
    parser.add_option(
        '-m',
        '--extract-free-memory',
        action='store_true',
        dest='enable_free_support',
        default=False,
        help="This will ENABLE extracting Free memory, mainly for test purposes.\n" +
        "We disable this feature in default because it requires agency within guest OS.\n" +
        "Normal user does not need to care about this option.")
    parser.add_option(
        '-d', '--disk', action='store_true', dest='disk_only', default=False,
        help='[overlay_creation] create only disk overlay only')
    parser.add_option(
        '-z',
        '--zip',
        action='store_true',
        dest='zip_container',
        default=True,
        help='[overlay_creation] encapsulate vm overlay files into a single zip file')
    parser.add_option(
        '-r', '--residue', action='store', dest='handoff_url', default=None,
        help='[synthesis] specify handoff destination url')
    settings, args = parser.parse_args(argv)

    if len(args) < 1:
        parser.error("Choose command :\n  %s" % " | ".join(commands))

    mode = str(args[0]).lower()
    if mode not in commands.keys():
        parser.error(
            "Invalid Command, Choose among :\n  %s" %
            " | ".join(commands))

    # option for creating residue
    valid_residue_condition = (mode == "synthesis") or (settings.handoff_url != 0)
    if not valid_residue_condition:
        parser.error(
            "-r (return residue) should be used only with synthesis command")

    return mode, args[1:], settings


def main(argv):
    if not synthesis.validate_congifuration():
        sys.stderr.write("failed to validate configuration\n")
        return 1

    CMD_BASE_CREATION = "base"
    CMD_OVERLAY_CREATION = "overlay"
    CMD_SYNTHESIS = "synthesis"
    CMD_LIST_BASE = "list-base"
    CMD_DEL_BASE = "del-base"
    CMD_ADD_BASE = "add-base"
    CMD_EXPORT_BASE = "export-base"
    CMD_IMPORT_BASE = "import-base"
    CMD_LIST_SESSION = "list-session"
    CMD_CLEAR_SESSION = "clear-session"
    CMD_LIST_OVERLAY = "list-overlay"
    CMD_INFO_OVERLAY = "info-overlay"

    commands = {
        CMD_BASE_CREATION: "create new base VM",
        CMD_OVERLAY_CREATION: "create new overlay VM on top of base VM",
        CMD_SYNTHESIS: "test created overlay using command line",
        CMD_LIST_BASE: "show all base VM at this machine",
        CMD_ADD_BASE: "add existing base vm to DB",
        CMD_DEL_BASE: "delete base vm at database",
        CMD_EXPORT_BASE: "export base VM into a portable file",
        CMD_IMPORT_BASE: "import base VM from a exported file",
        CMD_LIST_SESSION: "list all the session history",
        CMD_LIST_OVERLAY: "list all the overlay history",
        CMD_INFO_OVERLAY: "show information of the VM overlay",
        }
    mode, left_args, settings = process_command_line(sys.argv[1:], commands)

    if mode == CMD_BASE_CREATION:
        # creat base VM
        if len(left_args) < 1:
            sys.stderr.write("Need path to VM's virtual disk\n")
            sys.stderr.write(
                "Ex) ./cloudlet %s ../image/ubuntu/precise.raw\n" %
                (CMD_BASE_CREATION))
            return 1
        if len(left_args) > 1:
            sys.stderr(
                "Warning, qemu argument won't be applied to creating base vm")
        disk_image_path = left_args[0]
        disk_path, mem_path = synthesis.create_baseVM(disk_image_path)
        print "Base VM is created from %s" % disk_image_path
        print "Disk: %s" % disk_path
        print "Mem: %s" % mem_path
    elif mode == CMD_OVERLAY_CREATION:
        # create overlay
        if len(left_args) < 1:
            sys.stderr.write("\nNeed path to base disk\n")
            sys.stderr.write(
                "Check your base VM list './cloudet %s'\n" %
                (CMD_LIST_BASE))
            return 1
        disk_image_path = left_args[0]
        qemu_args = left_args[1:]
        options = Options()
        options.TRIM_SUPPORT = not settings.disable_trim_support
        options.FREE_SUPPORT = settings.enable_free_support
        options.DISK_ONLY = settings.disk_only
        options.ZIP_CONTAINER = settings.zip_container

        try:
            # resume base vm for creating vm overlay
            vm_overlay = synthesis.VM_Overlay(disk_image_path, options,
                                              qemu_args=qemu_args)
            machine = vm_overlay.resume_basevm()
            synthesis.connect_vnc(machine)
            vm_overlay.create_overlay()

            # print output
            if options.ZIP_CONTAINER is False:
                sys.stdout.write("[INFO] overlay metafile (%ld) : %s\n" %
                                 (os.path.getsize(vm_overlay.overlay_metafile),
                                  vm_overlay.overlay_metafile))
                for overlay_file in vm_overlay.overlay_files:
                    sys.stdout.write(
                        "[INFO] overlay (%ld) : %s\n" %
                        (os.path.getsize(overlay_file), overlay_file))
            else:
                overlay_zip = zipfile.ZipFile(vm_overlay.overlay_zipfile)
                filesize_count = 0
                for zipinfo in overlay_zip.infolist():
                    if zipinfo.filename == Const.OVERLAY_META:
                        msg = "meta file : (%ld) bytes\n" % \
                            (zipinfo.file_size)
                    else:
                        msg = "blob file : (%ld) bytes (%s)\n" % \
                            (zipinfo.file_size, zipinfo.filename)
                    filesize_count += zipinfo.file_size
                    sys.stdout.write(msg)
                sys.stdout.write(
                    "zip overhead : (%ld) bytes\n" %
                    (os.path.getsize(vm_overlay.overlay_zipfile) - filesize_count))
                sys.stdout.write(
                    "overlay file at : %s\n" % vm_overlay.overlay_zipfile)
        except Exception as e:
            LOG.error(
                "%s\nFailed to create overlay" % str(
                    traceback.format_exc()))
            return 1
    elif mode == CMD_SYNTHESIS:
        if len(left_args) < 2:
            sys.stderr.write("\nSynthesis requires path to VM disk and overlay-meta\n \
                    Ex) ./cloudlet synthesis /path/to/VM_disk /path/to/precise.overlay-meta [options]\n")
            return 1
        disk_image_path = left_args[0]
        overlay_meta = left_args[1]
        qemu_args = left_args[2:]
        is_zip_contained, url_path = PackagingUtil.is_zip_contained(
            overlay_meta)
        if is_zip_contained is True:
            overlay_meta = url_path
        try:
            if settings.handoff_url is not None:
                ret = synthesis.validate_handoffurl(settings.handoff_url)
                if not ret:
                    msg = "(%s) is invalid handoff URL" % settings.handoff_url
                    raise synthesis.CloudletGenerationError(msg)

            synthesis.synthesis(disk_image_path, overlay_meta,
                                disk_only=settings.disk_only,
                                handoff_url=settings.handoff_url,
                                zip_container=is_zip_contained,
                                qemu_args=qemu_args)
        except Exception as e:
            LOG.warning(str(e))
            LOG.error("%s\nFailed to synthesize" % str(traceback.format_exc()))
            return 1
    elif mode == CMD_INFO_OVERLAY:
        if len(left_args) != 1:
            sys.stderr.write("\nInfo VM overlay needs a path to the VM overlay\n \
                    Ex) ./cloudlet info-overlay /path/to/overlay\n")
            return 1
        overlay_path = left_args[0]
        try:
            output = synthesis.info_vm_overlay(overlay_path)
            sys.stdout.write("\n")
            sys.stdout.write(output)
        except Exception as e:
            LOG.warning(str(e))
            LOG.error(
                "%s\nFailed to info VM overlay" % str(
                    traceback.format_exc()))
            return 1
    elif mode == CMD_LIST_BASE:
        dbconn = get_database()
        basevm_list = dbconn.list_item(BaseVM)
        sys.stdout.write("hash value" + "\t\t\t\t\t" + "path\n")
        sys.stdout.write("-"*90 + "\n")
        for item in basevm_list:
            sys.stdout.write(item.hash_value + "\t" + item.disk_path + "\n")
        sys.stdout.write("-"*90 + "\n")
    elif mode == CMD_ADD_BASE:
        dbconn = get_database()
        if len(left_args) < 2:
            msg = "\n(Deprecated: This command is only for RAW base file format)\n"
            msg += "(NewL Use export-base, import-base command to register your Base VM)\n\n"
            msg += "Adding existing base VM from RAW file requires: \n"
            msg += "1) base path\n"
            msg += "2) hash value of the base\n"
            msg += "Ex) ./cloudlet add_base /path/to/base_disk.img 4304c473a9f98480c7d6387f01158881d3440bb81c8a9452b1abdef794e51111\n\n"
            sys.stderr.write(msg)
            return 1
        basedisk_path = os.path.abspath(left_args[0])
        base_hashvalue = left_args[1]
        if not os.path.isfile(basedisk_path):
            LOG.error("Not valid file: %s\n" % basedisk_path)
            return 1

        new_basevm = BaseVM(basedisk_path, base_hashvalue)
        dbconn.add_item(new_basevm)
    elif mode == CMD_DEL_BASE:
        if len(left_args) < 1:
            sys.stderr.write("\nDeleting base vm requires base path\n \
                    Ex) ./cloudlet del_base /path/to/base_disk.img \n")
            return 1
        dbconn, deleting_base = PackagingUtil._get_matching_basevm(
            disk_path=left_args[0])
        if deleting_base is not None:
            dbconn.del_item(deleting_base)
        else:
            LOG.error("Cannot find matching base disk\n")
            return 1
    elif mode == CMD_IMPORT_BASE:
        if len(left_args) < 1:
            sys.stderr.write(
                "\nImporting base vm requires 1) path to the exported file\n" +
                "Ex) ./cloudlet import-base /path/to/base_disk.img\n")
            return 1
        import_file = os.path.abspath(left_args[0])
        if os.path.exists(import_file) == False or \
                os.access(import_file, os.R_OK) == False:
            msg = "Cannot access file: %s" % import_file
            LOG.error(msg)
            return 1
        PackagingUtil.import_basevm(import_file)
    elif mode == CMD_EXPORT_BASE:
        if len(left_args) < 2:
            msg = "\nExporting base vm requires\n"
            msg += "  1) path to the base VM\n"
            msg += "  2) name of exported file\n"
            msg += "Ex) ./cloudlet export-base /path/to/base_disk.img ubuntu.zip \n"
            msg += "\nYou can find 'path to the base VM' using cloudlet list-base command\n\n"
            sys.stderr.write(msg)
            return 1
        basedisk_path = left_args[0]
        dbconn, matching_basevm = PackagingUtil._get_matching_basevm(
            disk_path=basedisk_path)
        output_path = os.path.join(os.curdir, str(left_args[1])) + ".zip"
        if matching_basevm is not None:
            PackagingUtil.export_basevm(
                output_path,
                basedisk_path,
                matching_basevm.hash_value)
        else:
            LOG.error("Cannot find matching base disk\n")
            return 1
    elif mode == CMD_LIST_SESSION:
        dbconn = get_database()
        session_list = dbconn.list_item(Session)
        sys.stdout.write(
            "session_id\t\tassociated_time\t\t\tdisassociated_time\t\tstatus\n")
        sys.stdout.write("-"*95 + "\n")
        for item in session_list:
            sys.stdout.write(str(item) + "\n")
        sys.stdout.write("-"*95 + "\n")
    elif mode == CMD_CLEAR_SESSION:
        dbconn = get_database()
        session_list = dbconn.list_item(Session)
        for item in session_list:
            dbconn.session.delete(item)
        dbconn.session.commit()
    elif mode == CMD_LIST_OVERLAY:
        dbconn = get_database()
        overlay_list = dbconn.list_item(OverlayVM)
        sys.stdout.write("id\tsession_id\t\tbasevm_path\t\t\t\t\t\tstatus\n")
        sys.stdout.write("-"*95 + "\n")
        for item in overlay_list:
            sys.stdout.write(str(item) + "\n")
        sys.stdout.write("-"*95 + "\n")
    else:
        sys.stdout.write("Invalid command: %s\n" % mode)
        return 1

    return 0

if __name__ == "__main__":
    from elijah.provisioning.package import PackagingUtil
    status = main(sys.argv)
    sys.exit(status)
