#!/usr/bin/env python 
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
import os
import sys
import signal
import msgpack
import argparse
import multiprocessing

if os.path.exists("../elijah") is True:
    sys.path.insert(0, "../")
from elijah.provisioning.stream_client import StreamSynthesisClient
from elijah.provisioning.synthesis import validate_congifuration
from elijah.provisioning.package import VMOverlayPackage
from elijah.provisioning.configuration import Const


def synthesize_data(overlay_path, comp_queue):
    overlay_package = VMOverlayPackage("file:///%s" %
                                       os.path.abspath(overlay_path))
    meta_raw = overlay_package.read_meta()
    meta_info = msgpack.unpackb(meta_raw)
    comp_overlay_files = meta_info[Const.META_OVERLAY_FILES]

    for blob_info in comp_overlay_files:
        comp_filename = blob_info[Const.META_OVERLAY_FILE_NAME]
        comp_type = blob_info.get(Const.META_OVERLAY_FILE_COMPRESSION, Const.COMPRESSION_LZMA)
        output_data = overlay_package.read_blob(comp_filename)
        modified_disk_chunks = blob_info.get(Const.META_OVERLAY_FILE_DISK_CHUNKS)
        modified_memory_chunks = blob_info.get(Const.META_OVERLAY_FILE_MEMORY_CHUNKS)
        comp_queue.put((comp_type, output_data, modified_disk_chunks, modified_memory_chunks))

    new_meta_info = dict()
    new_meta_info[Const.META_BASE_VM_SHA256] = meta_info[Const.META_BASE_VM_SHA256]
    new_meta_info[Const.META_RESUME_VM_DISK_SIZE] = meta_info[Const.META_RESUME_VM_DISK_SIZE]
    new_meta_info[Const.META_RESUME_VM_MEMORY_SIZE] = meta_info[Const.META_RESUME_VM_MEMORY_SIZE]
    comp_queue.put(Const.QUEUE_SUCCESS_MESSAGE)
    return new_meta_info

def sigint_handler(signum, frame):
    sys.stdout.write("Exit by user\n")
    if server != None:
        server.terminate()
    sys.exit(0)



# for testing
if __name__ == "__main__":
    if not validate_congifuration():
        sys.stderr.write("failed to validate configuration\n")
        sys.exit(1)

    parser = argparse.ArgumentParser()
    parser.add_argument('overlay_file')
    parser.add_argument('remote_addr')
    args = parser.parse_args()
    stream_client = None

    try:
        comp_queue = multiprocessing.Queue()
        metadata = synthesize_data(args.overlay_file, comp_queue)
        basevm_uuid = "406ed612a6a8b8a03fbbc5f45cceb0408a1c1d947f09d3b8a5352973d77d01f5"
        stream_client = StreamSynthesisClient(args.remote_addr, metadata, comp_queue)
        stream_client.start()
        stream_client.join()
    except Exception as e:
        sys.stderr.write(str(e))
        sys.exit(1)
    except KeyboardInterrupt as e:
        sys.stdout.write("Exit by user\n")
        sys.exit(1)
    else:
        sys.exit(0)



